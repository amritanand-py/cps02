
// C++ program to check if two trees are mirror
// of each other
#include<iostream>
using namespace std;
 
/* A binary tree node has data, pointer to
   left child and a pointer to right child */
struct Node
{
    int data;
    Node* left, *right;
};
 
/* Given two trees, return true if they are
   mirror of each other */
/*As function has to return bool value instead integer value*/
bool areMirror(Node* a, Node* b)
{
    /* Base case : Both empty */
    if (a==NULL && b==NULL)
        return true;
 
    // If only one is empty
    if (a==NULL || b == NULL)
        return false;
 
    /* Both non-empty, compare them recursively
     Note that in recursive calls, we pass left
     of one tree and right of other tree */
    return  a->data == b->data &&
            areMirror(a->left, b->right) &&
            areMirror(a->right, b->left);
}
 
/* Helper function that allocates a new node */
Node* newNode(int data)
{
    Node* node = new Node;
    node->data  = data;
    node->left  =  node->right  = NULL;
    return(node);
}
 
/* Driver program to test areMirror() */
int main()
{
    Node *a = newNode(1);
    Node *b = newNode(1);
    int n;
    cin>>n;
    for(int i=0;i<n-1;i++)
    {
        char p,q,r;
        cin>>p>>q>>r;
        if(i==0){
            a=newNode(p-48);
        }
        if(r=='L'){
            a->left = newNode(q-48);
        }
        else{
            a->right = newNode(q-48);
        }
    }
    for(int i=0;i<n-1;i++)
    {
        char p,q,r;
        cin>>p>>q>>r;
        if(i==0){
            b=newNode(p-48);
        }
        if(r=='L'){
            b->left = newNode(q-48);
        }
        else{
            b->right = newNode(q-48);
        }
    }
    
    areMirror(a, b)? cout << "yes" : cout << "no";
 
    return 0;
}
